{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","http","HttpService","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","cponsole","log","erro","reject","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","console","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor() {\r\n\r\n        this.http = new HttpService();\r\n    }\r\n\r\n// cb = Callback\r\n    obterNegociacoesDaSemana() {\r\n\r\n        //return new Promise((resolve, reject) => {\r\n        \r\n            return this.http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                return negociacoes\r\n                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n\r\n                })\r\n                .catch(erro => {\r\n                    cponsole.log(erro);\r\n                    reject(\"Não foi possivel obter as negociações da semana\");\r\n            //})\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        \r\n        //return new Promise((resolve, reject) => {\r\n        \r\n            return this.http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                return negociacoes\r\n                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n\r\n                })\r\n                .catch(erro => {\r\n                    cponsole.log(erro);\r\n                    reject(\"Não foi possivel obter as negociações da semana passada\");\r\n           // })\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        //return new Promise((resolve, reject) => {\r\n        \r\n            return this.http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                return negociacoes\r\n                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n\r\n                })\r\n                .catch(erro => {\r\n                    cponsole.log(erro);\r\n                    reject(\"Não foi possivel obter as negociações da semana retrasada\");\r\n            //})\r\n        });\r\n        \r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection)) \r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionadsa com Sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel adicionar a Negociação')\r\n            });\r\n\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection)) \r\n            .then(dao => dao.listaTodos())\r\n            .catch(() => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel obter a Negociação')\r\n            });\r\n\r\n    }\r\n\r\n    apaga() {\r\n        \r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociação apagadas com Sucesso')\r\n            .catch(() => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel apagar a Negociação')\r\n            }); \r\n\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao => \r\n                !listaAtual.some(negociacaoExistente => \r\n                JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n        )              \r\n        .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error('Não foi possivel buscar Negociações para importar');\r\n        });          \r\n    }\r\n    \r\n}"]}