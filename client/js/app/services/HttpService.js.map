{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAGKC,G,EAAK;AACf,4BAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACT,+BAAOH,GAAP;AAGP;;;wCAGGI,G,EAAK;AAAA;;AAEL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,+BAAOC,MAAMD,GAAN,EACNE,IADM,CACD;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBADC,EAENM,IAFM,CAED;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFC,CAAP;AAGH;;;yCAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,+BAAOJ,MAAMD,GAAN,EAAW;AACdM,qCAAS,EAAE,eAAgB,iBAAlB,EADK;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;;AAHQ,yBAAX,EAMFH,IANE,CAMG;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBANH,CAAP;AAQH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n\r\n    _handleErrors(res) {\r\n        if (!res.ok) throw new Error(res.statusText);\r\n            return res;\r\n       \r\n\r\n    }\r\n\r\n\r\n    get(url) {\r\n\r\n        /*return new Promise((resolve, reject ) => {\r\n    \r\n        /*Configurações de estado de requisições\r\n            0: requisição ainda não iniciada\r\n            1: conexão com o servidor estabelecida\r\n            2: requisição recebida\r\n            3: processando requisição\r\n            4: requisição concluida e a resposta esta pronta \r\n\r\n        \r\n                let xhr = new XMLHttpRequest();\r\n        \r\n                // Operação que vai ser realizada pelo servidor e endereço do servido\r\n                xhr.open('GET', url);\r\n\r\n        // Uma requisição passa por estados,\r\n        //  nome da propriedade em português é \"Pronto para mudança de estado\".\r\n                xhr.onreadystatechange = () => {\r\n        \r\n                    if (xhr.readyState == 4) {\r\n                        \r\n                        if (xhr.status == 200) {\r\n                        \r\n                           resolve(JSON.parse(xhr.responseText));\r\n    \r\n                        }else {\r\n                            reject(xhr.responseText);\r\n                        }\r\n        \r\n                    }\r\n                };\r\n        \r\n                xhr.send();\r\n\r\n        });*/\r\n\r\n        return fetch(url)\r\n        .then(res => this._handleErrors(res))\r\n        .then(res => res.json());\r\n    }\r\n\r\n    post(url, dado) {\r\n\r\n        return fetch(url, {\r\n            headers: { 'Conten-type' : 'aplication/json'},\r\n            method: 'post',\r\n            body: JSON.stringify(dado)\r\n        \r\n        })\r\n            .then(res => this._handleErrors(res));\r\n\r\n    }\r\n        /*return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        });\r\n\r\n    }*/\r\n\r\n}"]}