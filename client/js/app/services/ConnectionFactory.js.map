{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAErC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAGA;AAEI,qCAAa;AAAA;;AAET,kBAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAO2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEA;AACAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB,CADa,CACiB;AAC9Bb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACGE,gCAAQJ,UAAR;AAGP,qBAZD;;AAcAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAJD;AAKH,iBA7BM,CAAP;AA+BH;AAxCL;AAAA;AAAA,yCA0CwBrB,UA1CxB,EA0CmC;;AAE3BH,uBAAOyB,OAAP,CAAe,iBAAS;;AAEpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACIzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEAzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACP,iBAND;AAOH;AAnDL;AAAA;AAAA,8CAoDgC;AACpB,oBAAI5B,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACH;AACJ;AAzDT;;AAAA;AAAA;AA4DC,CAtEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n\r\nconst stores = ['negociacoes'];\r\nconst version = 3;\r\nconst dbName = 'aluraframe';\r\n\r\nvar connection = null;\r\nvar close = null;\r\n\r\n\r\nreturn class ConnectionFactory {\r\n\r\n    constructor(){\r\n\r\n        throw new Error('Não é possivel criar instancia de ConnectionFactory');\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n        \r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n            \r\n            // TRIÁDE de conexão, isso deve ser sempre usado uma conexão com banco\r\n            openRequest.onupgradeneeded = e => {\r\n        \r\n                ConnectionFactory._createStore(e.target.result);\r\n            };\r\n        \r\n            openRequest.onsuccess = e => {\r\n\r\n                if (!connection) {\r\n                    connection = e.target.result; // '!CONNECTION' =  se a conexão é falso\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function(){\r\n                        throw new Error('Não é possivel fechar diretamente a conexão');\r\n                    }\r\n                }\r\n                    resolve(connection);\r\n                    \r\n                \r\n            };\r\n        \r\n            openRequest.onerror = e => {\r\n        \r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            };\r\n        });\r\n        \r\n    }\r\n    \r\n    static _createStore(connection){\r\n        \r\n        stores.forEach(store => {\r\n    \r\n            if(connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n    \r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n        });\r\n    }\r\n        static closeConnection(){\r\n            if (connection) {\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n  }\r\n\r\n})();\r\n     \r\n"]}