{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsucess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","onsuccess","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAEhB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC;AACA,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB;;AAGd;AAHc,6BAITO,WAJS,CAIG,MAAKP,MAJR;;AAMd;AACA;AAPc,6BAQTQ,GARS,CAQLP,UARK,CAAd;;AAUAI,oCAAQI,QAAR,GAAmB,aAAK;AACpBN;AACH,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAHD;AAIH,yBArBM,CAAP;AAsBH;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOG,SAAP,GAAmB,aAAK;;AAEpB,oCAAIC,QAAQP,EAAEC,MAAF,CAASO,MAArB;;AAEA,oCAAID,KAAJ,EAAW;AACP,wCAAIE,OAAOF,MAAMG,KAAjB;AACAL,gDAAYM,IAAZ,CAAiB,IAAI5B,UAAJ,CAAe0B,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;;AAEAP,0CAAMQ,QAAN;AAEH,iCAND,MAMO;AACHzB,4CAAQe,WAAR;AACH;AAEJ,6BAdD;;AAgBAF,mCAAON,OAAP,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,uCAAP;AACH,6BAJD;AAKH,yBA9BM,CAAP;AAgCH;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT6B,KAHS,EAAd;;AAKAxB,oCAAQc,SAAR,GAAoB;AAAA,uCAAKhB,QAAQ,mCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAAI;;AAElBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AAEH,6BALD;AAMH,yBAfM,CAAP;AAgBH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            // pedindo a transação e o tipo para gravar \r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n\r\n            // Tendo acesso ao ObjectStore\r\n                .objectStore(this._store)\r\n\r\n            // Adicionando um object dentro do objectStore existente, porem o metodo add\r\n            // devolve uma request\r\n                .add(negociacao);\r\n\r\n            request.onsucess = e => {\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possivel adicionar a negociação');\r\n            };\r\n        });\r\n    }\r\n\r\n    listaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e => {\r\n\r\n                let atual = e.target.result;\r\n                \r\n                if (atual) {\r\n                    let dado = atual.value;\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n\r\n                    atual.continue();\r\n\r\n                } else {\r\n                    resolve(negociacoes);\r\n                }\r\n\r\n            };\r\n\r\n            cursor.onerror =  e => {\r\n\r\n                console.log(e.target.error);\r\n                reject('Não foi possivel listar as negociação');\r\n            };\r\n        });    \r\n\r\n    }\r\n\r\n    apagaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            request.onsuccess = e => resolve('Negociações removidas com sucesso');\r\n\r\n            request.onerror = e =>{\r\n\r\n                console.log(e.target.error);\r\n                reject('Não foi possivel remover as negociação');\r\n\r\n            };\r\n        });\r\n    }\r\n}"]}